apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    // building string config fields requires a double-quoted string
    // For non-strings in buildConfigField, use System.getenv instead of ENV.
    def ENV = { k -> "\"${System.getenv(k)}\"" }

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        applicationId "org.watsi.uhp"
        multiDexEnabled true
        versionCode System.getenv("VERSION_CODE") as Integer
        versionName System.getenv("VERSION_NAME") as String
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "Integer", "PROVIDER_ID", "1"
        buildConfigField "boolean", "USING_LOCAL_SERVER", "false"
        buildConfigField "boolean", "REPORT_TO_ROLLBAR", "true"
        buildConfigField "String", "ROLLBAR_API_KEY", ENV("ROLLBAR_API_KEY")
        buildConfigField "boolean", "SHOULD_CHECK_FOR_UPDATES", "false"
    }
    signingConfigs {
        releaseConfig {
            storeFile file("release-key.jks")
            storePassword System.getenv("RELEASE_KEYSTORE_PASSWORD")
            keyAlias System.getenv("RELEASE_KEY_ALIAS")
            keyPassword System.getenv("RELEASE_KEY_PASSWORD")
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".development"
            versionNameSuffix "-development"
            resValue "string", "application_id", defaultConfig.applicationId + applicationIdSuffix
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_dev"
            ]

            buildConfigField "boolean", "USING_LOCAL_SERVER", "true"
            buildConfigField "String", "API_HOST", "\"http://localhost:5000\""
            buildConfigField "boolean", "REPORT_TO_ROLLBAR", "false"
            buildConfigField "String", "HOCKEYAPP_APP_ID", "null"
            buildConfigField "String", "ROLLBAR_API_KEY", "null"
            buildConfigField "String", "SIMPRINTS_API_KEY", ENV("SANDBOX_SIMPRINTS_API_KEY")
        }
        sandbox {
            applicationIdSuffix ".sandbox"
            versionNameSuffix "-sandbox"
            resValue "string", "application_id", defaultConfig.applicationId + applicationIdSuffix
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_sandbox"
            ]
            buildConfigField "String", "API_HOST", ENV("SANDBOX_API_HOST")
            buildConfigField "String", "HOCKEYAPP_APP_ID", ENV("SANDBOX_HOCKEYAPP_APP_ID")
            buildConfigField "String", "SIMPRINTS_API_KEY", ENV("SANDBOX_SIMPRINTS_API_KEY")
        }
        demo {
            signingConfig signingConfigs.releaseConfig
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
            resValue "string", "application_id", defaultConfig.applicationId + applicationIdSuffix
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher"
            ]

            buildConfigField "String", "API_HOST", ENV("DEMO_API_HOST")
            buildConfigField "String", "HOCKEYAPP_APP_ID", ENV("DEMO_HOCKEYAPP_APP_ID")
            buildConfigField "String", "SIMPRINTS_API_KEY", ENV("SANDBOX_SIMPRINTS_API_KEY")
            buildConfigField "boolean", "SHOULD_CHECK_FOR_UPDATES", "true"
        }
        training {
            signingConfig signingConfigs.releaseConfig
            applicationIdSuffix ".training"
            versionNameSuffix "-training"
            resValue "string", "application_id", defaultConfig.applicationId + applicationIdSuffix
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher"
            ]

            buildConfigField "Integer", "PROVIDER_ID", "1"
            buildConfigField "String", "API_HOST", ENV("DEMO_API_HOST")
            buildConfigField "String", "HOCKEYAPP_APP_ID", ENV("TRAINING_HOCKEYAPP_APP_ID")
            buildConfigField "String", "SIMPRINTS_API_KEY", ENV("SANDBOX_SIMPRINTS_API_KEY")
            buildConfigField "boolean", "SHOULD_CHECK_FOR_UPDATES", "true"
        }
        release {
            signingConfig signingConfigs.releaseConfig
            applicationIdSuffix ".production"
            versionNameSuffix "-production"
            resValue "string", "application_id", defaultConfig.applicationId + applicationIdSuffix
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher"
            ]

            buildConfigField "String", "API_HOST", ENV("PRODUCTION_API_HOST")
            buildConfigField "String", "HOCKEYAPP_APP_ID", ENV("PRODUCTION_HOCKEYAPP_APP_ID")
            buildConfigField "String", "SIMPRINTS_API_KEY", ENV("PRODUCTION_SIMPRINTS_API_KEY")
            buildConfigField "boolean", "SHOULD_CHECK_FOR_UPDATES", "true"
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

dependencies {
    def dependencies = rootProject.ext.dependencies
    def testDependencies = rootProject.ext.testDependencies

    implementation (project(":domain")) {
        exclude group: 'org.threeten', module: 'threetenbp'
    }
    implementation (project(':device')) {
        exclude group: 'org.threeten', module: 'threetenbp'
    }
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Support libraries
    implementation dependencies.kotlin
    implementation dependencies.kotlinReflect
    implementation dependencies.androidSupportLibrary
    implementation dependencies.supportDesign
    implementation dependencies.cardView
    implementation dependencies.gson
    implementation dependencies.gmsVision
    implementation dependencies.constraintLayout

    // Dependency injection
    implementation dependencies.dagger
    implementation dependencies.daggerAndroidSupport
    kapt dependencies.daggerAndroidProcessor
    kapt dependencies.daggerCompiler
    kaptTest dependencies.daggerCompiler
    kaptAndroidTest dependencies.daggerCompiler

    // AAC
    implementation dependencies.aacLifecycleExtensions
    implementation dependencies.roomRuntime
    implementation dependencies.roomRxJava
    implementation dependencies.reactiveStreams
    kapt dependencies.roomCompiler

    // API
    implementation dependencies.retrofit
    implementation dependencies.retrofitRxJava
    implementation dependencies.gsonConverter

    // Simprints
    implementation dependencies.simprints

    // Time
    implementation dependencies.threeTenAndroidBackport

    // RX Java
    implementation dependencies.rxJava
    implementation dependencies.rxAndroid

    // Exception reporting
    implementation dependencies.rollbar

    // Image loading
    // https://bumptech.github.io/glide/doc/download-setup.html#gradle
    implementation (dependencies.glide) {
        exclude group: "com.android.support"
    }
    kapt dependencies.glideCompiler

    // Application dependencies
    implementation 'me.xdrop:fuzzywuzzy:1.1.9'
    implementation 'me.philio:pinentryview:1.0.6'
    implementation 'net.hockeyapp.android:HockeySDK:4.1.2'

    // Testing
    testImplementation project(path: ':domain', configuration: 'testOutput')
    testImplementation testDependencies.junit
    testImplementation testDependencies.mockito
    testImplementation testDependencies.mockitoKotlin
    testImplementation testDependencies.aacTesting
    testImplementation testDependencies.robolectric
    androidTestImplementation testDependencies.androidTestRunner
    androidTestImplementation testDependencies.espresso
    androidTestImplementation testDependencies.okReplayEspresso
}
